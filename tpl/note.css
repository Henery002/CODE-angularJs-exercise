/*
	TODO 网易云课堂后盾网 angularJS教程
*/
【学习目录】：[2017-09-05 ~]

<01> 什么是angular及与jquery实例对比分析
<02> angularjs开发宝典之模块、视图模型、控制器、双向数据绑定模型
<03> angularjs开发宝典之MVVM双向数据绑定
<04> 声明模块与控制器规范与依赖注入分析
<05> [20170906]$scope的基本使用方法：
1.ng-app
2.ng-controller
3.ng-click
4.ng-module

<06> [20170906]表达式与 ng-bind 及 ng-cloak 解决闪屏问题：
1.ng-bind	
2.ng-cloak	解决闪屏问题

<07> ng-model 在表单中双向绑定实例分析讲解
<08> ng-value 的使用实例讲解
1.ng-value 指令。用于input中，可接受表达式，区别于 ng-model
	
<09> 实例讲解 angaular 控制单选框
1.ng-show 

<10> 实例讲解 angular 操作chexkbox复选框
<11> 实例讲解 angular 操作 select 列表框
1.ng-options    ==>    <select ng-options="v.value as v.name for v in data" ng-model="city">...</select>

<12> 函数使用方法大小写转换与对象深拷贝
1.angular.version
2.angular.lowercase()
3.angular.uppercase()
4.angular.copy()
5. ...

<13> [20170907]函数使用对象扩充与数据遍历
1.angular.extend();
2.angular.forEach(data,function(v,k){});	==>		可遍历数组或对象
	例：var data = { name:'name1',age:'age1'  };
		angular.forEach(data,function(v,k){
			console.log(v,k)		//v表示属性值，k表示下标name/age
		})

<14> [20170907]json数据转换与本地存储及$scope数据序列化提交到后台
1.localStorage.setItem('data',$scope.data);		//将data对象保存进本地（保存后变成了json字符串）
2.localStorage.getItem('data');					//获取本地存储的data字符串

3.angular.toJson(...);		//将对象转换成json字符串，如：angular.toJson($scope.data = {'name':'后盾人'});
4.angular.fromJson(localStorage.getItem('data'));		//将json字符串转换成对象，方便读取，如：angular.fromJson()

5.表单序列化 见【例14.html/14.php】

<15> 数据类型判断函数与数据比较方法的使用
 1.angular.isArray([]);				//true
 2.angular.isDate(new Date());		//true
 3.angular.isDefined(a);				//若a已声明未赋值，则为false；若a未声明，则报错
 4.angular.isUndefined();			//
 5.angular.isFunction(function(){});	//true
 6.angular.isNumber();				//
 7.angular.isString();				//
 8.angular.isObject({});				//true
 9.angular.isElement(document.getElementsByTagName('body').item(0));		//true
10.angular.equals(a,b);				//若 a = {}; b = {};则为 true。
...

<16> ng-init 与 ng-trim 及表单中表单value与$scope数据提交差异分析
1.ng-init		//直接临时定义数据
	例：<div ng-app='app' ng-controller='myctrl' ng-init='name="后盾人"'>
			{{ name }}
		</div
2.ng-trim		//清楚字符串头尾两端的空字符。angular中默认都有，若不使用，设置为 ng-init="false"。
				//但 <input type="password"/>类型的input不糊清除头尾空格
	例：
		标题：<input ng-trim ng-model='title' />

<17> 使用 ng-if、ng-show、ng-disabled、ng-init 实现网站注册协议设置
1.ng-show 			//通过css类名控制显隐
2.ng-if 			//通过增删控制显隐
3.ng-disabled 		//针对button控制其是否可点击
4.ng-click 			//

5.ng-model 

<18> ng-repeat 实例详细讲解与后盾人网站进行分析
1.ng-repeat

<19> ng-selected、ng-disabled、ng-readonly 实例讲解
1.ng-selected 		//设置option标签是否被选中
2.ng-disabled 		//无法提交表单
3.ng-readonly 		//可以提交表单
	例：见例19及解析

<20> 超简单实现表单的全选与反选
1.ng-checked 		//实现表单的全选/反选
	例：20

<21> ng-model-options 设置数据同步时机提交网站性能
1.ng-model-options 		//
	1.ng-model-options="{'updateOn':'blur'}"	//失焦时更新
	2.ng-model-options="{debounce:350}"			//设置更新时间间隔
	3.ng-model-options="{'updateOn':'default blur',debounce:{default:2000,blur:0}}"		/ /未失焦时2s后更新，失焦后立即更新（参数ddefault必须设置）

<22> 通过ng-class动态改变样式类实例操作
1.ng-class 				控制样式类，其值可接收json
	ng-class="{red:true,font:false}" 		//表示应用red类名，不应用font类名
	ng-class="'red'"	//表示直接应用red类名
	1.ng-class-odd="{...}"
	2.ng-class-even="{...}"
	3....

<23> 使用ng-style动态改变样式
1.ng-style 				//ngaular中的内联样式写法，接收json的值，使用驼峰命名
	例：
	1.<span ng-style="{color:'#f89b38',fontSize:'38px'}">网易云课堂</span>
	2.<label>输入字号：<input type="text" ng-model="size"/>
	  <span ng-style="{fontSize:size+'px'}">网易云课堂</span>

<24> 事件处理指令讲解
1.ng-dblclick="func()" 			//双击
2.ng-keydown
3.ng-keypress
4.ng-mousedown
5.ng-mouseover
6.ng-mouseup
7.ng-mouseleave
...

/*小案例*/
<25> AngularJS+flex弹性盒模型
<26> AngularJS+flex弹性盒模型
<27> AngularJS 弹性盒模型+bootStrap 开发微信菜单前端之根据微...
<28> 弹性盒模型+boo··
<29> 弹性盒模型+boo··
/*小案例 end*/

<30> 弹性盒模型+bootStrap 开发微信菜单前端之使用fontawesome..
1.使用图标库

<31> 弹性盒模型+bootStrap 开发微信菜单前端之underscore与lodash..
1.underscore.js 		//前端库 - underscore.js 操作数据--删除数据
2.lodash.js 			//前端库 - lodash.js

<32> 弹性盒模型+bootStrap 开发微信菜单前端之使用underscore..
1.underscore.js 		//前端库 - underscore.js 操作数据--删除数据

<33> 修复删除菜单时一级菜单选项不显示的问题

/*过滤器/变量调节器*/
<34> filter变量调节器分析与货币变量调节器处理
1.currency 				//货币变量调节器  --  对数据进行二次处理、
	例：{{ price | currency:'¥':2 }}  		//表示对price数值四舍五入按价格格式取值
2.number 				//数字变量调节器
	例：{{ price | number:2 }}				//表示对price数值四舍五入取两位小数

<35> lowercase与uppercase过滤器使用
1.lowercase 			//转小写
	例：{{ name | lowercase }}
2.uppercase 			//转大写
	例：{{ name | uppercase }}
3.混合使用				//转小写后又被转为大写
	例：{{ name | lowercase | uppercase }}

<36> 使用limitTo过滤器截取字符
1.limitTo  				//截取字符个数
	例：{{ name | limitTo:2 }}		//截取前2个字符
		{{ name | limitTo:3:0 }}	//从第0个开始取，截取3个
		{{ name | limitTo:3:2 }}	//从第2个开始取，截取3个

<37>  使用date过滤器处理时间
1.date 					//格式化时间
	例：{{ time | date:'yyyy年mm月dd日 HH:mm:ss' }}		//将从后台获取到的时间总毫秒数格式化为 2016年10月01日 12:30:00
		{{ time | date:'yy-mm-dd HH时mm分ss秒' }}		//支持多种时间格式

<38> AngularJS开发宝典之orderBy数据
1.orderBy 				//排序
	例：{{ data | orderBy:'id' }}				//按id字段排序显示
		{{ data | orderBy:'id':true; }}			//按id字段降序排序
		{{ data | orderBy:'title':false; }}		//按title字段升序排序
2.filter 				
	例：{{ data | filter:'2' }} 				//过滤/匹配包含关键字'2'的数据
		{{ data | filter:'中' }} 				//匹配包含关键字'中'的数据
		{{ data | filter:'我':true; }} 			//完全匹配，即值中只包含“我”

<39> 控制器中如何使用过滤器服务
1.通过在控制器中依赖注入的方式注入 $filter 的服务
	例：39.html
		...
		$scope.orderBy = function(){			//首先要在控制器中注入 $filter
			$scope.data = $filter('orderBy')($scope.data,'id',true);
		}

<40> callee与过滤器··
1.arguments.callee
	例：40.html

<41> 使用$scope处理升降序
1.法二实现升降序
	例：41.html
/*过滤去/变量调节器 end*/

<42> $scope.$watch 监听数据变化
1.字符串型：(传2个参数)
	$scope.title = '';
	$scope.$watch('title',function(newData,oldData){
		console.log(newData,newData.length);
	});
2.对象型：(传3个参数)
	$scope.data = { title:'' };
	$scope.$watch('data',function(newData,oldData){
		console.log(newData,newData.title.length);
	},true);

<43> 使用$watch与$filter过滤器制作数据筛选
	例：43.html

<44> 自定义过滤器之手机号加星过滤器实例
	例：44.html
		var module = angular.module('app',[]);
		module.filter('truncate',function(){	//truncate过滤器为 截取
			return function(){
				return ...;
			}
		});

<45> SPA应用与自定义指令使用场景应用场景分析
1.SPA : Single Page Application 简介

<46> 自定义指令directive的restrict属性说明
1.restrict:'AEC',			//A:attribute  E:element  C:class
	例：46.html
		app.directive('myCms',[function(){
			restrict:'AE',
			tempplate:'...'			//1.template后面直接接字符串
		}]);

<47> 自定义指令名称的标准规范
1.通过在指令中对指令名使用驼峰命名法定义指令的前缀，在视图中使用前缀指令。
	例：47.html
		<div my-cms></div>
		app.directive('myCms',[function(){return{restrict:'AEC',template:'...'}}]);

<48> 【**】自定义指令template函数式操作实例讲解
1.指令中template接收函数表达式，传2个形参：elem,attr
	例：48.html
		app.directive('myCms',[function(){
			return {
				restrict:'AE',
				template:function(elem,attr){
					return "<span>"+ $(elem).html() +"</span>"
				}
			}
		}]);

<49> 【**】自定义指令replace属性详解
1.replace:true 				//表示将template返回的span标签替换掉视图中的自定义标签 <my-cms></my-cms> 
2.replace:false 			//表示将template返回的span标签嵌入到视图中的自定义标签 <my-cms></my-cms> 中
							//当自定义指令作为 restrict:A 使用时，若replace为 true ，则替换后的标签仍有自定义的属性 my-cms
	例：49.html

<50> 【***】自定义指令transclude与templateUrl属性详解
1.transclude 				//创建包含其他元素的指令。
	//transclude使带有这个选项的指令所包裹的内容能够访问指令外部的作用域。也就是说可以把带有该选项的指令插入到模板文件中的任意位置。见例50.html
	例：50.html、views/mycms.html
		详解见html内容

<51> controller控制器scope父子集作用域实例讲解一
1.作用域的继承与隔离
2.作用域的继承但不隔离

<52> controller控制器scope父子集作用域实例讲解二
1.总结：
	在父子控制器中，
	==>若使用的变量是标量(即非对象类型变量)，则在使用 ng-model 时，子控制器会把父控制器中的标量复制一份，即【隔离】，子控制器中数据改变不会影响父级；
	==>若使用的变量是引用类型(如对象)，则在使用 ng-model 时，子级不会复制父级中的变量，即【继承】，子级中改变数据会同步影响到父级。
	例：Github源码 53.html

<53> 指令scope作用域分析一
1.scope:false				//默认情况。指令中的取值继承于控制器，即没有独立的scope作用域
2.scope:true 				//指令的初始值会继承控制器中的数据，且控制器中的数据会影响指令。但是指令的更新不会再影响控制器。即ng会为指令单独配置独立的scope
3.scope:{} 					//各个指令完全独立，不会再继承控制器（包括初始值也不会继承）
	例：51.html
		app.directive('myCms',[function(){
			return {
				restrict:'AE',
				template:"{{ name }} <input type='text' ng-model='name' />",
				scope:{} 			//false/true/{}
			}
		}]);

<54> scope隔离作用域之@单向文本绑定
1.scope:{color:'@myColor'}			//
	例：54.html 详解

<55> scope隔离作用域之=双向文本绑定


<56> scope隔离作用域之=&调用父作用域中函数


<57> 指令directive的controller属性


<58> 指令directive的link属性详解


<59> tab面板组件的指令实现


<60> 服务server应用分析与使用场景


<61> 使用$scope.$apply进行数据脏检查





